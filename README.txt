#README.txt
#Proyecto CSPSolver
#Autor: Castillo Alcántara Rodrigo

N-Reinas
Este programa determina las posiciones de n reinas definidas por el usuario en un tablero de ajedrez de nxn cuadros. Debe solucionarse por medio de un algoritmo BackTrack por lo que será necesario diseñar un algoritmo recursivo que nos lo permita.
Se realizará por medio de objetos, para lo cual será necesario dfinir clases para cada uno de los objetos a usar.

CLASE													DESCRIPCIÓN
---------------------------------------------------------------------------------------------------------------------------------------------
Reina 						La reina tiene una posición en el tablero, por lo cual se indicará dicha posición 																por medio de un sistema de dos coordenadas: (x,y) donde x será la fila & y será 																la columna en la que se encuentra la reina.
---------------------------------------------------------------------------------------------------------------------------------------------
Tablero 				El tablero será una clase que contará símplemente con la lista de reinas con sus respectivas posiciones en el tablero 								y el número de casillas que se tienen
---------------------------------------------------------------------------------------------------------------------------------------------

Para el tablero se porgrama una función para saber si una casilla indicada está disponible respecto al resto de las reinas que están en el tablero, en caso deque esté disponible se regresará un True que nos indicará que podemos colocar una reina ahí. En caso negativo se retornará un False. La forma en como trabaja esta función es ir comparando las coordenadas del par ordenado recibido con las coordenadas de casillas amenazadas por cada reina en la lista de reinas del tablero; esto se realiza comparando primer si no se encuentra en el mismo renglón o columna, después, se hace el análisis considerando a las casillas que están en diagonal a las reinas para lo cual se usa un método de obtención del valor absoluto de la diferencia de coordenadas. Sean (i,j) y (m,n) coordenadas, el algoritmo hace la resta |n-j| y |i-m|, estasse compraran y si resulta que son iguales entonces se encuentran sobre la misma diagonal. Por ejemplo, si se tienen las casillas (1,1) y (3,3) que se encuentan en la misma diagonal; se hace el cruce y resta de coordenadas, así: |3-1| = 2, |1-3| = 2, así 2 = 2 por lo que las casillas están en la misma diagonal como se esperaba.

Para la función principal de acomodo de reinas se usa un algoritmo BackTracking para lo cual es necesario utilizar una llamada recursiva de la misma función. En esta se hace la comprobación del caso base al inicio el cual se cumple cuando la cantidad de reinas colocadas en el tablero (en la lista de reinas del tablero) es igual al orden del tablero. Por otra parte si es que esta condición no se cumple entonces comnezará a colocarse las reinas en posiciones todas las posiciones de un mismo renglón buscando una casilla en la cual la nueva reina no se vea amenazada por las otras, en caso de que se encuentre una casilla segura se colocará ahí a la reina (metiéndola en la lista de reinas del tablero) y se hará la llamada recursiva de la función pasándole como parámetros al mismo tablero y al renglón siguiente del cual se estaban iterando sus columnas, esto debido a que las reinas no se pueden encontrar sobre el mismo renglón, por lo que nos ahorramos comparaciones al no colcar a reinas en casillas de un mismo renglón. Por otro lado, si al estar buscando una casilla válida para la reina no se encuentra, entonces sacamos a la última reina que estuvo en el tablero, y la cambiamos de posición sobre el mismo renglón hasta que encontremos una casilla válida, en el caso de que este no se encuentre se recurre al mismo procedimiento eliminando a una reina anterior y así posicionandola en un sitio distinto. Cuando se encuentren las n posiciones para las n reinas se hará una salida sin afectar a las reinas que ya están posisionadas en una casila. Finalmente dichas posiciones se encontrarán en la lista de reinas del tablero.




COLOREADO DE GRAFOS
Este programa determina los colores de n nodos definidos por el usuario en un grafo de N nodos con M conexiones entre nodos. Debe solucionarse por medio de un algoritmo BackTrack por lo que será necesario diseñar un algoritmo recursivo que nos lo permita.
Se realizará por medio de objetos, para lo cual será necesario dfinir clases para cada uno de los objetos a usar.

CLASE													DESCRIPCIÓN
---------------------------------------------------------------------------------------------------------------------------------------------
Nodo							El nodo tiene atributos de nombre, que servirá para identificarlo y de color propio, por medio del cual 																podremos hacer las debidas comparaciones.
---------------------------------------------------------------------------------------------------------------------------------------------
Grafo 				Un objeto de una clase Grafo será aquel que tenga los atributos de: diccionario de nodos ligados, que para cada nodo nos 					indicará cuales son los nodos que tiene adyacentes un nodo en específico. Tiene además el orden del grafo, que es 								unicamente la cantidad de nodos con lo que cuenta. Finalmente tiene como atributo una lista de nodos que corresponde a los 																nodos que se han ido coloreando.
---------------------------------------------------------------------------------------------------------------------------------------------

Para la clase Grafo se programa una función que está preparada para recibir como parámetros al grafo y a un nodo es específico. Esta función tiene como propósito concluír si un nodo coloreado de una forma en particular es viable para la solución del coloreado del grafo. La forma en como funciona es la siguiente: En el grafo se tiene el atributo del diccionario de nombres de nodos adyacentes a cada uno de los nombres de nodos del grafo en particular, se tiene además la lista de nodos que ya se han coloreado satisfactoriamente -hasta el momento-. Es importante mencionar que el diccionario contiene unicamente los "nombres" de los nodos, es decir al nodo en su atributo "name", mientras que en la lista se cuenta con los objetos de la clase Nodo. Primero se iteran los nombres de los nodos adyacentes al nodo que acaba de entrar, después de esto se iteran a los objetos de la lista de nodos del grafo. Se hace la comparación: si el nombre del nodo adyacente al que se envió por parámetro es igual al nodo en su campo "name", es decir que si alguno de los nodos adyacentes al último que se quiere insertar (el que se pasa como parámetro) ya está coloreado, y si el nodo en su campo "color" es igual al nodo que se pasó como parámetro en su atributo "color", es decir que si además de que un nodo adyacente ya se encuentra coloreado se compara si el color de este es el mismo que el color del nodo que se quiere insertar, lo cual no debe permitirse. En caso de que esto último se cumpla entonces el nodo que se quiere insertar a la lista ya tiene el mismo color que un nodo adyacente, por lo que se devuleve "False" lo que indica que ese color no es un color válido, por otra parte si ninguno de los nodos adyacentes tuvo el mismo color que el del nodo que se quiere insertar, se devuelve "True" porque si se trata de un color válido.

Para la función principal se utiliza la misma estructura que la función nQueens implementada para el problema anterior, por lo que no se ahondará tanto en la explicación: Para que se ajuste al algoritmo el nombre del nodo debe estar con letras seguidas en el codigo ascii, se sumará un 1 para ir a la siguiente letra y darle un nombre distinto al nodo.
Para el problema de nodos el parámetro "row", debe ser el nodo siguiente con el cual se eligirá un color. El ciclo for interno de la función varía en columnas para las reinas, para el problema del coloreado debe vairar el color, se crearía entonces un nodo con un color determinado y este se enviaría a una función para saber si se trata de un color disponible. En caso de que sea un color disponible se insertará el nodo a la lista de nodos del grafo, después se entrará de nuevo en la función llamando al siguiente nodo y asignandole un color: en caso de que falle se iterará con un nuevo color construyendo un nuevo nodo con dicho color haciendose todo el proceso anterior. Si se terminan las iteraciones y no se encontró ningún color viable entonces se hará el proceso de backtrack eliminando el último nodo de la lista de nuevo.

